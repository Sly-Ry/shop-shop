{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan&Lindsey\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\pages\\\\Detail.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport Cart from '../components/Cart';\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  const {\n    products,\n    cart\n  } = state; // the useEffect() Hook here has to check for a couple of things. It first checks to see if there's data in our global state's products array.\n\n  useEffect(() => {\n    //  If there is, we use it to figure out which product is the current one that we want to display\n    if (products.length) {\n      // It does this finding the one with the matching _id value that we grabbed from the useParams() Hook and saves it to the local state currentProduct.\n      setCurrentProduct(products.find(product => product._id === id));\n    } // If no, we don't have data in global state, let's check whether we retrieved data from the server using the useQuery() Hook. If yes, save that data to global state and to the product object store in IndexedDB, and we'll run the useEffect() Hook over again to make that first if statement run.\n    else if (data) {\n      // The useEffect() Hook is set up so that if we don't have any products saved in global state, we'll use the product data that we returned from the useQuery() Hook to set the product data to the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct,\n          purchaseQuantity: 1\n        }\n      });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, currentProduct && cart ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"\\u2190 Back to Products\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, currentProduct.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, currentProduct.description), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Price:\"), \"$\", currentProduct.price, ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addToCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Add to Cart\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !cart.find(p => p._id === currentProduct._id),\n    onClick: removeFromCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Remove from Cart\")), /*#__PURE__*/React.createElement(\"img\", {\n    src: `/images/${currentProduct.image}`,\n    alt: currentProduct.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Cart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  })) : null, loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nexport default Detail;","map":{"version":3,"sources":["C:/Users/Ryan&Lindsey/Desktop/projects/shop-shop/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","Cart","useStoreContext","QUERY_PRODUCTS","idbPromise","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","spinner","Detail","state","dispatch","id","currentProduct","setCurrentProduct","loading","data","products","cart","length","find","product","_id","type","forEach","then","indexedProducts","addToCart","itemInCart","cartItem","purchaseQuantity","parseInt","removeFromCart","name","description","price","p","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  // the useEffect() Hook here has to check for a couple of things. It first checks to see if there's data in our global state's products array.\n  useEffect(() => {\n    //  If there is, we use it to figure out which product is the current one that we want to display\n    if (products.length) {\n      // It does this finding the one with the matching _id value that we grabbed from the useParams() Hook and saves it to the local state currentProduct.\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // If no, we don't have data in global state, let's check whether we retrieved data from the server using the useQuery() Hook. If yes, save that data to global state and to the product object store in IndexedDB, and we'll run the useEffect() Hook over again to make that first if statement run.\n    else if (data) {\n      // The useEffect() Hook is set up so that if we don't have any products saved in global state, we'll use the product data that we returned from the useQuery() Hook to set the product data to the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n    }\n  };\n    \n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n          <Cart />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </>\n  );\n}\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}
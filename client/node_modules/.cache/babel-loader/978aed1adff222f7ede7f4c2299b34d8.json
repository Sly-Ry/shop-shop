{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan&Lindsey\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\components\\\\ProductList\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport spinner from '../../assets/spinner.gif'; // it's very close to how we set it up with the CategoryMenu component\n\nfunction ProductList() {\n  // we immediately execute the useStoreContext() function to retrieve the current global state object and the dipatch() method to update state.\n  const [state, dispatch] = useStoreContext(); // We then destructure the currentCategory data out of the state object so we can use it in the filterProducts() function.\n\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); // We then implement the useEffect() Hook in order to wait for our useQuery() response to come in. Once the data object returned from useQuery() goes from undefined to having an actual value, we execute our dispatch() function, instructing our reducer function that it's the UPDATE_PRODUCTS action and it should save the array of product data to our global store. When that's done, useStoreContext() executes again, giving us the product data needed display products to the page.\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n    }\n  }, [data, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["C:/Users/Ryan&Lindsey/Desktop/projects/shop-shop/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","useStoreContext","UPDATE_PRODUCTS","spinner","ProductList","state","dispatch","currentCategory","loading","data","type","products","filterProducts","filter","product","category","_id","length","map","image","name","price","quantity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,OAAOC,OAAP,MAAoB,0BAApB,C,CAEA;;AACA,SAASC,WAAT,GAAuB;AACrB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,eAAe,EAAzC,CAFqB,CAIrB;;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAsBF,KAA5B;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBX,QAAQ,CAACE,cAAD,CAAlC,CAPqB,CASrB;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,IAAJ,EAAU;AACRH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAER,eADC;AAEPS,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFR,OAAD,CAAR;AAID;AACF,GAPQ,EAON,CAACF,IAAD,EAAOH,QAAP,CAPM,CAAT;;AASA,WAASM,cAAT,GAA0B;AACxB,QAAI,CAACL,eAAL,EAAsB;AACpB,aAAOF,KAAK,CAACM,QAAb;AACD;;AAED,WAAON,KAAK,CAACM,QAAN,CAAeE,MAAf,CAAsBC,OAAO,IAAIA,OAAO,CAACC,QAAR,CAAiBC,GAAjB,KAAyBT,eAA1D,CAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGI,QAAQ,CAACM,MAAT,gBACC;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,cAAc,GAAGM,GAAjB,CAAsBJ,OAAD,iBACpB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACE,GADf;AAEE,IAAA,GAAG,EAAEF,OAAO,CAACE,GAFf;AAGE,IAAA,KAAK,EAAEF,OAAO,CAACK,KAHjB;AAIE,IAAA,IAAI,EAAEL,OAAO,CAACM,IAJhB;AAKE,IAAA,KAAK,EAAEN,OAAO,CAACO,KALjB;AAME,IAAA,QAAQ,EAAEP,OAAO,CAACQ,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADD,gBAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAhBJ,EAkBGd,OAAO,gBAAG;AAAK,IAAA,GAAG,EAAEL,OAAV;AAAmB,IAAA,GAAG,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAyC,IAlBnD,CADF;AAsBD;;AAED,eAAeC,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport spinner from '../../assets/spinner.gif';\n\n// it's very close to how we set it up with the CategoryMenu component\nfunction ProductList() {\n  // we immediately execute the useStoreContext() function to retrieve the current global state object and the dipatch() method to update state.\n  const [state, dispatch] = useStoreContext();\n\n  // We then destructure the currentCategory data out of the state object so we can use it in the filterProducts() function.\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  // We then implement the useEffect() Hook in order to wait for our useQuery() response to come in. Once the data object returned from useQuery() goes from undefined to having an actual value, we execute our dispatch() function, instructing our reducer function that it's the UPDATE_PRODUCTS action and it should save the array of product data to our global store. When that's done, useStoreContext() executes again, giving us the product data needed display products to the page.\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n    }\n  }, [data, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}
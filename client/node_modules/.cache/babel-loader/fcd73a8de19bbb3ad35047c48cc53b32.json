{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan&Lindsey\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\pages\\\\Success.js\";\nimport React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n  useEffect(() => {\n    async function saveOrder() {\n      // declare a variable called cart that uses the idbPromise() function to get all of the cart items.\n      const cart = await idbPromise('cart', 'get'); // Then declare a new variable called products that maps the cart items into an array of product IDs.\n\n      const products = cart.map(item => item.product);\n    } // We've set up an inner saveOrder() function as an async function because we'll need to perform some asynchronous actions like reading from IndexedDB and calling the addOrder() mutation.\n\n\n    saveOrder();\n  }, [addOrder]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Success!\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Thank you for your purchase!\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"You will now be redirected to the homepage\")));\n}\n\n;\nexport default Success;","map":{"version":3,"sources":["C:/Users/Ryan&Lindsey/Desktop/projects/shop-shop/client/src/pages/Success.js"],"names":["React","useEffect","useMutation","Jumbotron","ADD_ORDER","idbPromise","Success","addOrder","saveOrder","cart","products","map","item","product"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,SAASC,OAAT,GAAmB;AACf,QAAM,CAACC,QAAD,IAAaL,WAAW,CAACE,SAAD,CAA9B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeO,SAAf,GAA2B;AACvB;AACA,YAAMC,IAAI,GAAG,MAAMJ,UAAU,CAAC,MAAD,EAAS,KAAT,CAA7B,CAFuB,CAIvB;;AACA,YAAMK,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,IAAI,IAAIA,IAAI,CAACC,OAAtB,CAAjB;AACH,KAPW,CASZ;;;AACAL,IAAAA,SAAS;AACZ,GAXQ,EAWN,CAACD,QAAD,CAXM,CAAT;AAaA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDALA,CADJ,CADJ;AAaH;;AAAA;AAED,eAAeD,OAAf","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success() {\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n    useEffect(() => {\r\n        async function saveOrder() {\r\n            // declare a variable called cart that uses the idbPromise() function to get all of the cart items.\r\n            const cart = await idbPromise('cart', 'get');\r\n\r\n            // Then declare a new variable called products that maps the cart items into an array of product IDs.\r\n            const products = cart.map(item => item.product);\r\n        }\r\n        \r\n        // We've set up an inner saveOrder() function as an async function because we'll need to perform some asynchronous actions like reading from IndexedDB and calling the addOrder() mutation.\r\n        saveOrder();\r\n    }, [addOrder]);\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron>\r\n            <h1>Success!</h1>\r\n            <h2>\r\n                Thank you for your purchase!\r\n            </h2>\r\n            <h2>\r\n                You will now be redirected to the homepage\r\n            </h2>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Success;"]},"metadata":{},"sourceType":"module"}